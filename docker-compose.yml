version: '3.8'

networks:
  aegis guard: {}
  atlas:
    internal: true
  sentinel:
    internal: true
  elk: {}

volumes:
  shared_code:
    driver: local
    driver_opts:
      type: none
      device: ./requirements/shared_code
      o: bind
  elasticsearch_data:
    driver: local

services:

  apollo:
    container_name: apollo
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - "discovery.type=single-node"
      - "network.host=0.0.0.0"
      - "xpack.security.enrollment.enabled=true"
    command: /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana > .env

  iris:
    depends_on:
      - apollo
        # condition: service-healthy
    container_name: iris
    image: docker.elastic.co/kibana/kibana:8.12.2
    ports:
      - "5601:5601"
    environment:
      - "elasticsearch.hosts=http://apollo:9200"
      # - "server.rewriteBasePath=true"
      # - "server.publicBaseUrl="
      # - "server.basePath="

  aether:
    container_name: aether
    image: docker.elastic.co/logstash/logstash:8.12.2
    ports:
    - "9600:9600"

# Server proxy
  aegis:
    container_name: aegis
    image: aegis
    build:
      context: ./requirements/aegis
      dockerfile: Dockerfile
    ports:
      # - "80:80"
      # - "443:443"
      - "7999:80"
      - "8000:443"
    volumes:
      - ./requirements/aegis:/usr/share/nginx/html
      - /etc/letsencrypt/archive/batch42.me:/etc/letsencrypt/live/batch42.me:r
    networks:
      - aegis guard
      - atlas
      - sentinel
    depends_on:
      - alfred
      - apollo
      - coubertin
      - cupidon
      - davinci
      - hermes
      - iris
      - lovelace
      - ludo
      - malevitch
      - mensura
      - mnemosine
      - petrus
      - aether

    restart: on-failure

# Profil container
  alfred:
    container_name: alfred
    image: alfred
    build:
      context: ./requirements/alfred
      dockerfile: Dockerfile
    volumes:
      - ./requirements/alfred/alfred_project:/app
      - shared_code:/app/shared
    ports:
      - "8001:8001"
    networks:
      - atlas
    restart: on-failure

# Tournament container
  coubertin:
    container_name: coubertin
    image: coubertin
    build:
      context: ./requirements/coubertin
      dockerfile: Dockerfile
    volumes:
      - ./requirements/coubertin/coubertin_project:/app
      - shared_code:/app/shared
    ports:
      - "8002:8002"
    networks:
      - atlas
    restart: on-failure

# Matchmaking container
  cupidon:
    container_name: cupidon
    image: cupidon
    build:
      context: ./requirements/cupidon
      dockerfile: Dockerfile
    volumes:
      - ./requirements/cupidon/cupidon_project:/app
      - shared_code:/app/shared
    ports:
      - "8003:8003"
    networks:
      - atlas
    restart: on-failure

# Matchmaking container
  davinci:
    container_name: davinci
    image: davinci
    build:
      context: ./requirements/davinci
      dockerfile: Dockerfile
    volumes:
      - shared_code:/app/shared
    ports:
      - "8010:8010"
    networks:
      - sentinel
    restart: on-failure

# Notification container
  hermes:
    container_name: hermes
    image: hermes
    build:
      context: ./requirements/hermes
      dockerfile: Dockerfile
    volumes:
      - ./requirements/hermes/hermes_project:/app
      - shared_code:/app/shared
    ports:
      - "8004:8004"
    networks:
      - atlas
    restart: on-failure

# Auth inter-container container
  lovelace:
    container_name: lovelace
    image: lovelace
    build:
      context: ./requirements/lovelace
      dockerfile: Dockerfile
    volumes:
      - ./requirements/lovelace/lovelace_project:/app
      - shared_code:/app/shared
    ports:
      - "8005:8005"
    networks:
      - atlas
    restart: on-failure

# Game container
  ludo:
    container_name: ludo
    image: ludo
    build:
      context: ./requirements/ludo
      dockerfile: Dockerfile
    volumes:
      - ./requirements/ludo/ludo_project:/app
      - shared_code:/app/shared
    ports:
      - "8006:8006"
    networks:
      - atlas
    restart: on-failure

# Front container
  malevitch:
    container_name: malevitch
    image: malevitch
    build:
      context: ./requirements/malevitch
      dockerfile: Dockerfile
    volumes:
      - ./requirements/malevitch:/usr/share/nginx/html
    ports:
      - "8007:80"
    networks:
      - atlas
    restart: on-failure

# Prometheus container
  mensura:
    container_name: mensura
    image: mensura
    build:
      context: ./requirements/mensura
      dockerfile: Dockerfile
    volumes:
      - shared_code:/app/shared
    ports:
      - "8011:8011"
    networks:
      - atlas
      - sentinel
    restart: on-failure

# Stats container
  mnemosine:
    container_name: mnemosine
    image: mnemosine
    build:
      context: ./requirements/mnemosine
      dockerfile: Dockerfile
    volumes:
      - ./requirements/mnemosine/mnemosine_project:/app
      - shared_code:/app/shared
    ports:
      - "8008:8008"
    networks:
      - atlas
    restart: on-failure

# Authentification container
  petrus:
    container_name: petrus
    image: petrus
    build:
      context: ./requirements/petrus
      dockerfile: Dockerfile
    volumes:
      - ./requirements/petrus/petrus_project:/app
      - shared_code:/app/shared
    ports:
      - "8009:8009"
    networks:
      - atlas
    restart: on-failure

# Data exporter container
  mensura_exporter:
    container_name: mensura_exporter
    image: quay.io/prometheus/node-exporter
    volumes:
      - "/:/host:ro,rslave"
    ports:
      - "9100:9100"
    command: ["--path.rootfs=/host"]
    networks:
      - atlas
    pid: "host"
    restart: on-failure

# Data exporter container
  aegis_exporter:
    container_name: aegis_exporter
    image: aegis_exporter
    build:
      context: ./requirements/mensura/aegis_exporter
      dockerfile: Dockerfile
    volumes:
      - shared_code:/app/shared
    ports:
      - "9913:9913"
    networks:
      - atlas
    restart: on-failure

# Websocket container
  redis:
    container_name: redis
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - atlas
    restart: on-failure
